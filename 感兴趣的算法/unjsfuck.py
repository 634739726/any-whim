# 想要更加通用的处理 jsfuck 的解密
# 现在的处理方式面前还能使用，不过还差一个就是在切分元运算的部分并没有将字符串适配进去
# 并且在异常的处理上目前还不够完善，有些异常直接忽略的话会存在很大的问题。
# 倘若粗暴处理异常，那么在一些非完全使用六字符的 jsfuck 的处理里面就不能更好的解压代码。
# 后续还需要考虑八字符的 jsfuck ，也就是再加上 {} 这种类型处理的部分。
# 目前这里能处理的字符串统一使用单引号，后续再考虑双引号的处理
# 目前发掘可能 eval 函数的处理不太可靠，后续会改
# 还有在字符串里面的 中括号 内容会被当做微计算小群匹配到，导致字符串的改变，这里非常重要，需要早点修改。

'''
一些运算参考表

# +
+true       1
+false      0
+[]         0
+''         0
+'asdf'     NaN
+'123123'   123123
+123        123
+undefined  NaN

# !
![]         false
!''         true
!'asdf'     false
!true       false
!false      true
!undefined  true

# [?] 
[][[]]      undefined
[][true]    undefined
[?][?]      undefined # 通常 [][?] 这种类型就是通过找列表对象找不到则返回一个undefined

# ''
'' + 'asdf'     # 'asdf'        字符串
'' + 123        # '123'         字符串
'' + undefined  # 'undefined'   字符串
'' + true       # 'true'        字符串
'' + false      # 'false'       字符串
'' + [true]     # 'true'        字符串
'' + [false]    # 'false'       字符串
'' + [123,123]  # '123,123'     字符串
'' + NaN        # 'NaN'         字符串

# []
同上，都会生成字符串

# 123
123 + 'asdf'    # 字符串
123 + 123       # 数字
123 + undefined # NaN
123 + true      # 124
123 + false     # 123
123 + [true]    # 字符串
123 + [false]   # 字符串
123 + [123,123] # '123123,123'
123 + NaN       # NaN



自行实现js的计算，统计一下所有的类型：
数字
字符串
undefined
true,false 
null
NaN

'''

import re

def cuter(string, force=True):
    # 正确的分割算数单元，结果返回一个列表
    # eg.  '+!+[]+[0]+[][[]]+![true]+!+[]+!+[false]'
    #  => ['+!+[]', '+', '[0]', '+', '[][[]]', '+', '![true]', '+', '!+[]', '+', '!+[false]']
    def combine(p):
        # 合并相连的中括号， [?] 将拼接的列表连接在一起。因为是一个计算单元
        # eg. []      [[]]  => [][[]]
        # eg. 'asdf'  [3]   => 'asdf'[3]
        pr = None
        ci = 0
        cb = {}
        for cr in sorted(p):
            if pr:
                if pr[1] == cr[0]:
                    if ci not in cb: cb[ci] = []
                    if pr not in cb[ci]: cb[ci].append(pr)
                    if cr not in cb[ci]: cb[ci].append(cr)
                else:
                    ci += 1
                    if ci not in cb: cb[ci] = []
                    if cr not in cb[ci]: cb[ci].append(cr)
            else:
                if ci not in cb: cb[ci] = []
                if cr not in cb[ci]: cb[ci].append(cr)
            pr = cr
        d = {}
        for pi in sorted(cb):
            v = cb[pi]
            l, r = v[0][0], v[-1][1]
            d[(l, r)] = ''.join([p[i] for i in v])
        return d
    list_left, list_right = '[]'
    tupl_left, tupl_right = '()'
    s = string
    p = {}
    l, r = 0, 0
    _list  = 0
    _name  = 1
    _int   = 2
    _str   = 3
    _tuple = 4
    def find(string, r):
        '''
        在查找时，同时获取下一个结构的类型，虽然jsfuck只用很少的字符
        不过在层层解析的过程中，还是会生成其他类型的数据，所以需要考虑到这类型的数据分割
        并且在一定情况下，原始的脚本就是混合 jsfuck 的。一开始就有其他类型的数据，所以还是需要考虑。
        _list , _int , _str, _name, _tuple
        '''
        _ints = list(map(str,range(10)))
        te = re.findall(r"[a-zA-Z0-9$_\[\(']", s[r:])
        if te:
            if te[0] == list_left:
                ft = _list
            elif te[0] == tupl_left:
                ft = _tuple
            elif te[0] == "'":
                ft = _str
            elif te[0] in _ints:
                ft = _int
            else:
                ft = _name
            return string.find(te[0], r), ft
        else:
            return -1, None

    q, ft = find(s, 0)
    t = True
    while t:
        c = []
        if q == -1: break
        for idx,i in enumerate(s[q:]):
            if ft == _list:
                if i == list_left:  c.append(list_left)
                if i == list_right: c.pop()
                if len(c) == 0:
                    l, r = q, q + idx + 1
                    p[(l, r)] = s[l:r]
                    q, ft = find(s, r)
                    break
            elif ft == _tuple:
                if i == tupl_left:  c.append(tupl_left)
                if i == tupl_right: c.pop()
                if len(c) == 0:
                    l, r = q, q + idx + 1
                    p[(l, r)] = s[l:r]
                    q, ft = find(s, r)
                    break
            else:
                if   ft == _name: v = re.findall(r'[a-zA-Z0-9$_]+', s[r:])[0]
                elif ft == _int:  v = re.findall(r'[0-9]+', s[r:])[0]
                elif ft == _str:  v = re.findall(r"'[^']*'", s[r:])[0]
                l, r = q, q + len(v)
                p[(l, r)] = s[l:r]
                q, ft = find(s, r)
                break
        if len(c) > 0: t = False
    s = string
    d = combine(p)
    k = sorted(d)
    ll, rr = 0, len(s) + 1
    if k:
        q = [ll]
        for l,r in k:
            q.append(l); q.append(r)
        q.append(rr)
        e = {}
        w = {}
        pr = ''
        for i in range(len(q) - 1):
            k, v = (q[i], q[i+1]), s[q[i]:q[i+1]]
            if i%2 == 0: 
                # c = re.findall(r'\+!+\+$|\+$', v)
                c = re.findall(r'\+((?:!+\+)?)$', v)
                c.extend(re.findall(r'\+((?:!+)?)$', v))
                pr = c[0] if c else ''
                e[k] = v[:len(v) - len(pr)]
            if i%2 == 1: 
                w[k] = pr + v
        e.update(w)
        k = sorted(e)
        r = [e[i] for i in k]
        if len(r) >= 2 and (r[0].endswith('+') or r[0].endswith('!') or not r[0]):
            r = [r[0] + r[1]] + [i for i in r[2:] if i]
        return r
    else:
        print('error', string)
        return ['[{}]'.format(string)]

def allplus(ls):
    '''
    通过将列表内的表达式进行比较初级的元映射后，进行运算变换
    这里的运算变换会考虑到不同类型的 js 隐式转换，虽然不一定能完全覆盖
    但是从原运算的角度来考虑的话，会更加贴近真实的解析状态
    原始函数经过切分函数后生成切分单元列表，然后再经过本函数后即可处理元映射计算处理
    eg. ['+!+[]', '+', '[0]', '+', '[][[]]', '+', '![true]', '+', '!+[]', '+', '!+[false]', '+', '!+[123]', '+', '!+[undefined]', '+', '[123123]', '+', "['asdfasdf']"]
     => '10undefinedfalsetruetruefalsetrue123123asdfasdf'
    原函数 +!+[]+[0]+[][[]]+![true]+!+[]+!+[false]+!+[123]+!+[undefined]+[123123]+['asdfasdf'] 
    '''
    _unfind     = -1
    _int        = 0
    _str        = 1
    _undefined  = 2
    _boolen     = 3
    _null       = 4
    _NaN        = 5
    _list       = 6
    _func       = 7
    q = [
        ["NaN",         "NaN",      _NaN],
        ["false",       "false",    _boolen],
        ["true",        "true",     _boolen],
        ["undefined",   "undefined",_undefined],
        ["[]",          "[]",       _list],
        ["[][[]]",      "undefined",_undefined],
        ["[]['']",      "undefined",_undefined],
        ["['']",        "[]",       _list],
    ]
    e = [
        [r'^\+(!*)\[\]$',           "_bint_",    _int],
        # ["+![]",    "0",        _int],
        # ["+!![]",   "1",        _int],
        # ["+[]",     "0",        _int],
        [r'^\+(!+)\+\[\]$',         "_binti_",   _int],
        # ["+!+[]",   "1",        _int],
        # ["+!!+[]",  "0",        _int],
        [r'^(!+)\[\]$',             "_bool_",   _boolen],
        [r'^(!+)\+\[\]$',           "_booli_",  _boolen],
        # ["!+[]",    "true",     _boolen],
        # ["!!+[]",   "false",    _boolen],
        # ["![]",     "false",    _boolen],
        # ["!![]",    "true",     _boolen],
        [r'^\+?(\d+)$',             None,       _int],
        [r"^\+?'(\d+)'$",           None,       _int],
        [r"^\+?(\d+)e(\d+)$",       "_sint",    _int], # 科学计数法，我TM惊呆了
        [r"^\+?'(\d+)e(\d+)'$",     "_sint",    _int], # py与js自动变化的位数不同，py:16, js:21
        [r"^'([^']*)'$",            None,       _str],
        [r"^('[^']*'\[\d+\])$",     "_eval_",   _str],
        [r"^('[^']*'\['\d+'\])$",   "_evalr_",  _str],
        [r"^'[^']*'\['([^']+)'\]$", "_strfunc", _func],
        [r"^\['([^']+)'\]$",        None,       _str],
        [r'^\[([^\[\]]*)\]$',       None,       _list],
        [r"^\+?\[\]\['([^'\[\]]+)'\]$","_arrfunc", _func], # 这里存在查找函数可能，若找不到才会是 undefined
        [r"^\[\]\[[^'\[\]]+\]$",    "undefined",_undefined], 
        # 这里考虑放弃对方法字符串的判断 [1][2] 这种结构中的 2 部分将不接受字符串匹配
        # 因为这里可能会获取到函数，我这里的功能不包括实现 js 内部函数块
        [r'^!\[.+\]$',              "false",    _boolen],
        [r'^!(\d+)$',               "_int_",    _boolen],
        [r'^\+\[null\]$',           "0",        _int],
        [r'^\+\[undefined\]$',      "0",        _int],
        [r'^\+\[(\d+)\]$',          None,       _int],
        [r'^\+\[true\]$',           "NaN",      _NaN],
        [r'^\+\[false\]$',          "NaN",      _NaN],
        [r'^\+\[NaN\]$',            "NaN",      _NaN],
        [r"^\+\['([^']+)'\]$",      "NaN",      _NaN],
        [r"^!\+\['([^']+)'\]$",     "true",     _boolen],
        [r'^!\+\[(\d+)\]$',         "_int_",    _boolen],
        [r'^!\+\[\w+\]$',           "true",     _boolen],
    ]
    arrf = [
        "concat",      "copyWithin",  "entries",     "every",       "fill",
        "filter",      "find",        "findIndex",   "forEach",     "from",
        "includes",    "indexOf",     "isArray",     "join",        "keys",
        "lastIndexOf", "map",         "pop",         "push",        "reduce",
        "reduceRight", "reverse",     "shift",       "slice",       "some",
        "sort",        "splice",      "toString",    "unshift",     "valueOf",
    ]
    srtf = [
        "anchor",       "big",          "blink",        "bold",         "charAt",
        "charCodeAt",   "concat",       "fixed",        "fontcolor",    "fontsize",
        "fromCharCode", "indexOf",      "italics",      "lastIndexOf",  "link",
        "localeCompare","match",        "replace",      "search",       "slice",
        "small",        "split",        "strike",       "sub",          "substr",
        "substring",    "sup",          "toString",     "valueOf",      "toLowerCase",
        "toUpperCase",  "toSource",     "toLocaleLowerCase",    "toLocaleUpperCase",
    ]
    def _get_func(string, obj):
        if obj == 'arr':
            if string in arrf:              return "function " +string+ "() { [native code] }"
            elif string == 'constructor':   return "function Array() { [native code] }"
        if obj == 'str':
            if string in srtf:              return "function " +string+ "() { [native code] }"
            elif string == 'constructor':   return "function String() { [native code] }"

    def get_fit(s):
        if isinstance(s, (list,tuple)):
            return s
        for i in q:
            i.copy()
            if s == i[0]:
                return i
        for i in e:
            i = i.copy()
            v = re.findall(i[0], s)
            if v:
                if   i[1] is None:      i[1] = v[0]
                elif i[1] == '_int_':   i[1] = 'false' if int(v[0]) else 'true'
                elif i[1] == '_eval_':  
                    try:                i[1] = eval(v[0])
                    except:             i[1], i[2] = "undefined", _undefined
                elif i[1] == '_evalr_': 
                    try:                i[1] = eval(re.sub(r"\['(\d+)'\]$", r'[\1]', v[0]))
                    except:             i[1], i[2] = "undefined", _undefined
                elif i[1] == '_bint_':  i[1] = '0'      if v[0].count('!')%2 == 1 or v[0].count('!') == 0 else '1'
                elif i[1] == '_binti_': i[1] = '1'      if v[0].count('!')%2 == 1 else '0'
                elif i[1] == '_bool_':  i[1] = 'false'  if v[0].count('!')%2 == 1 else 'true'
                elif i[1] == '_booli_': i[1] = 'true'   if v[0].count('!')%2 == 1 else 'false'
                elif i[1] == '_sint':   i[1] = str(eval('{}e{}'.format(*v[0]))).replace('+','') # 科学计数法py中稍微与js不一，后续注意
                elif i[1] == '_strfunc':
                    f2string = _get_func(v[0], 'str')
                    if f2string:
                        if not s.startswith('+'):
                            i[1] = f2string
                        else:
                            i[1], i[2] = 'NaN', _NaN
                    else:
                        i[1], i[2] = 'undefined', _undefined
                elif i[1] == '_arrfunc':
                    f2string = _get_func(v[0], 'arr')
                    if f2string:
                        if not s.startswith('+'):
                            i[1] = f2string
                        else:
                            i[1], i[2] = 'NaN', _NaN
                    else:
                        i[1], i[2] = 'undefined', _undefined
                return i
        return ['', s, _unfind]
    def parse_type(xv, xt, tp):
        if tp == _NaN:
            return 'NaN'
        if tp == _int:
            if xt != _int:
                if xv == 'true':    return '1'
                if xv == 'false':   return '0'
                if xv == 'null':    return '0'
            else:
                return xv
        if tp == _str:
            if xt != _str:
                if xv == '[]':
                    return ''
                else: 
                    return xv
            else:
                return xv
        if tp == _unfind:
            return xv
    def _plus(a, b):
        '''
        这里还需要增加一些无法计算类型的处理
        比如一些变量名字的计算暂时不需要考虑，过早的加入那个会使得问题复杂化。
        k:key 
        v:value 
        t:targettype
        '''
        ak, av, at = a
        bk, bv, bt = b
        types = [at, bt]
        if _list in types or _str in types or _func in types:
            rt = _str
        elif _NaN in types or _undefined in types:
            rt = _NaN
        elif _int in types:
            if types.count(_int) == 2:
                rt = _int
            elif _boolen in types or _null in types:
                rt = _int
        elif _boolen in types:
            if types.count(_boolen) == 2:
                rt = _int
            elif _null in types:
                rt = _int
        elif _null in types:
            if types.count(_boolen) == 2:
                rt = _int
        else:
            rt = _unfind
        _a = parse_type(av, at, rt)
        _b = parse_type(bv, bt, rt)
        if rt == _NaN: val = 'NaN'
        if rt == _str: val = _a + _b
        if rt == _int: val = int(_a) + int(_b)
        if rt == _unfind: val = _a + '+' + _b 
        return None, str(val), rt
    
    l = [i for idx,i in enumerate(ls[::-1]) if idx%2  == 0]
    t = True
    p = []
    if len(l) < 2:
        v = get_fit(l.pop())
        v = parse_type(v[1], v[2], _str)
        return v if v else repr(v)

    while t and len(l):
        p.append(l.pop())
        if len(p) == 2:
            left  = get_fit(p[0])
            right = get_fit(p[1])
            p = [_plus(left, right)]
    return repr(p[0][1]) if p[0][2] == _str else p[0][1]




s = '[![]]+[][[]]'
# s = '+!+[]+!+[]+!+[]+[]+[][[]]+[[[]]]'
# s = '[![]]+[][[]]+"asdf"+12312'
s
s
s = '[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])+[]))()'
s
# s = '''$hidescript=String.fromCharCodeconstructor";_[_][_]((+{}+[]+[]+[]+[]+{})[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+$hidescript[(+[])]+([![]]+[][[]])[+!+[]+[+[]]]+$hidescript[(+!+[])]+(!![]+[])[!+[]+!+[]+!+[]]+([]+[]+{})[+!+[]]+(!![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+$hidescript[+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]]+([![]]+{})[+!+[]+[+[]]]+([]+[]+{})[+!+[]]+$hidescript[(+!+[])]+$hidescript[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([![]]+{})[+!+[]+[+[]]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([]+[]+{})[!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([]+[]+[][[]])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([]+[]+{})[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([![]]+{})[+!+[]+[+[]]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([]+[]+{})[!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([![]]+{})[+!+[]+[+[]]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(![]+[])[+!+[]]+([]+[]+[][[]])[+!+[]]+([]+[]+[][[]])[!+[]+!+[]]+([]+[]+{})[+!+[]]+$hidescript[(+!+[])]+$hidescript[+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])();'''
# s = '+!+[]+[0]+[][[]]+![true]+!+[]+!+[false]+!+[123]+!+[undefined]+[123123]'
# s = "+!+[]+[0]+[][[]]+![true]+!+[]+!+[false]+!+[123]+!+[undefined]+[123123]+['asdfasdf']+1234"
# s = '+!+[]+[0]+[][[]]+![true]+!+[]+!+[false]+!+[123]+!+[undefined]'
# s = '+!+[]+[123123]'
# s = "+!+[]+[0]+'false'"
# s = '[123123]'
# s = '+!+[]+!+[]+!+[]+!+[]+!+[]+[]'
# s = '!0+123+[]'
# s = "'false'[0]+'falseundefined'['10']+'false'[2]+'true'[0]+'true'[3]+'true'[1]"
# s = '!!![]+[]'
s = '([][[]]+[[]]+[[]+[]+[!+[]+!+[]]]+(123)+(333))'
# s = "[+[]['filter']+!![]]"
# s = "'truefunction filter() { [aasdfasdf asdf+1234] }'['10']+'undefined'[1]"
# s = 'native code'
# s = "('asdf')"
# s = "[''[([]['filter']+[])[3]+(!![]+[]['filter'])['10']+'undefined'[1]+'false'[3]+'true'[0]+'true'[1]+'undefined'[0]+([]['filter']+[])[3]+'true'[0]+(!![]+[]['filter'])['10']+'true'[1]]]"

def some(s, dlevel=10):
    '''
    在一定程度上获取最微小单元的处理上，并没有想象中那么的好。不过应对常规的jsfuck应该是没有问题
    微小单元计算非常重要，目前最终还是使用了正则代换规避一些问题，后续还是需要考虑其他部分
    暂时还没有解决 ''['length'] 的问题，不过目前暂时用的不多。
    '''
    expa = r'(^|\+|\[|\(|\)|\])(\([^\(\)\[\]]+\))'
    expb = r'\[[^\(\)\[\]]+\]'
    expc = r"'[^']*'"
    expd = r"\[([a-zA-Z0-9$_']+)\]"
    unique, unit = '##', '[]'
    uleft, uright = '@', '&'
    pleft, pright = '%', '`'
    def repa(string): return string.replace('[',uleft).replace(']',uright).replace('(',pleft).replace(')',pright)
    def repb(string): return string.replace(uleft,'[').replace(uright,']').replace(pleft,'(').replace(pright,')')
    def repc(string): return allplus(cuter( repb(string[1:-1].replace(unique,unit)) ))
    def parse_idxstr(string):
        '''
        将解析差不多干净的字符串下标单字部分清理成单个字符串
        并且将所有连接在一起的部分进行合并
        不过这个函数功能暂时还不太稳定，我觉得还是不要放在循环里面会更安全一点
        考虑到一些正则上的模糊性，最好放在循环外面，最后跑一次即可
        '''
        a = r"(^|\+)'([^']*)'\[(\d+)\]"
        b = r"(^|\+)'([^']*)'\['(\d+)'\]"
        c = r"'([^']*)'\[(\d+)\]($|\+)"
        d = r"'([^']*)'\['(\d+)'\]($|\+)"
        x = r"(?:(?:^|\+)'[^'\[\]\(\)\+]+')+"
        def _inindex(g, left=True):
            s = g.group(2)      if left else g.group(1)
            i = int(g.group(3)) if left else int(g.group(2))
            if i > len(s):
                r = 'undefined'
            else:
                r = s[i]
            return g.group(1) + repr(r) if left else repr(r) + g.group(3)
        _inindex_left  = lambda g:_inindex(g)
        _inindex_right = lambda g:_inindex(g, left=False)
        def _combine_single(g):
            v = g.group(0)
            r = "'{}'".format(v.replace('+','').replace("'",'').replace('+',''))
            if v.startswith('+'): r = '+' + r
            if v.endswith('+'):   r = r + '+'
            return r
        v = re.sub(a, _inindex, string)
        v = re.sub(b, _inindex, v)
        v = re.sub(c, _inindex_right, v)
        v = re.sub(d, _inindex_right, v)
        v = re.sub(x, _combine_single, v)
        v = re.sub(r"([\]\)])('[^']+')([\(\[])", lambda i:"({})".format(i.group(2)) + i.group(3), v)
        return v

    v = s
    def e(g): return repa(g.group(0))                   # 规避函数
    def h(g): return uleft + g.group(1) + uright        # 规避函数
    def f(g): return g.group(1) + repc(g.group(2))      # 处理抽取小括号中的计算体
    def j(g): return '[{}]'.format(repc(g.group(0)))    # 处理抽取中括号中的计算体
    for i in range(dlevel):
        v = v.replace(unit,unique)
        v = re.sub(expc, e, v)
        v = re.sub(expd, h, v)
        v = re.sub(expa, f, v) # 从小括号中的内容获取解析式，并计算
        v = repb(v.replace(unique,unit)).replace(unit,unique)
        v = re.sub(expc, e, v)
        v = re.sub(expd, h, v)
        v = re.sub(expb, j, v) # 从中括号中的内容获取解析式，并计算
        v = repb(v.replace(unique,unit))
        v = parse_idxstr(v)
        if v != s: 
            s = v
        else:
            break
        print('======= level: {} ======='.format(i+1))
        print(v)
        print()

    print('====== fin ======')
    print(v)
    return v

# s = "[]['filter']['constructor']('a'+'lert'+'('+[1]+')')()"
print(cuter(s))
print(s);print()
f = some(s, 10)