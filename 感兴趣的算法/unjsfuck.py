# 想要更加通用的处理 jsfuck 的解密
# 现在的处理方式面前还能使用，不过还差一个就是在切分元运算的部分并没有将字符串适配进去
# 并且在异常的处理上目前还不够完善，有些异常直接忽略的话会存在很大的问题。
# 倘若粗暴处理异常，那么在一些非完全使用六字符的 jsfuck 的处理里面就不能更好的解压代码。
# 后续还需要考虑八字符的 jsfuck ，也就是再加上 {} 这种类型处理的部分。

'''
一些运算参考表

# +
+true       1
+false      0
+[]         0
+''         0
+'asdf'     NaN
+'123123'   123123
+123        123
+undefined  NaN

# !
![]         false
!''         true
!'asdf'     false
!true       false
!false      true
!undefined  true

# [?] 
[][[]]      undefined
[][true]    undefined
[?][?]      undefined # 通常 [][?] 这种类型就是通过找列表对象找不到则返回一个undefined

# ''
'' + 'asdf'     # 'asdf'        字符串
'' + 123        # '123'         字符串
'' + undefined  # 'undefined'   字符串
'' + true       # 'true'        字符串
'' + false      # 'false'       字符串
'' + [true]     # 'true'        字符串
'' + [false]    # 'false'       字符串
'' + [123,123]  # '123,123'     字符串
'' + NaN        # 'NaN'         字符串

# []
同上，都会生成字符串

# 123
123 + 'asdf'    # 字符串
123 + 123       # 数字
123 + undefined # NaN
123 + true      # 124
123 + false     # 123
123 + [true]    # 字符串
123 + [false]   # 字符串
123 + [123,123] # '123123,123'
123 + NaN       # NaN



自行实现js的计算，统计一下所有的类型：
数字
字符串
undefined
true,false 
null
NaN

'''

import re

def cuter(string, force=True):
    # 正确的分割算数单元，结果返回一个列表
    # eg.  '+!+[]+[0]+[][[]]+![true]+!+[]+!+[false]'
    #  => ['+!+[]', '+', '[0]', '+', '[][[]]', '+', '![true]', '+', '!+[]', '+', '!+[false]']
    def combine(p):
        # 合并相连的中括号，让功能能够更方便的处理
        pr = None
        ci = 0
        cb = {}
        for cr in sorted(p):
            if pr:
                if pr[1] == cr[0]:
                    if ci not in cb: cb[ci] = []
                    if pr not in cb[ci]: cb[ci].append(pr)
                    if cr not in cb[ci]: cb[ci].append(cr)
                else:
                    ci += 1
                    if ci not in cb: cb[ci] = []
                    if cr not in cb[ci]: cb[ci].append(cr)
            else:
                if ci not in cb: cb[ci] = []
                if cr not in cb[ci]: cb[ci].append(cr)
            pr = cr
        d = {}
        for pi in sorted(cb):
            v = cb[pi]
            l, r = v[0][0], v[-1][1]
            d[(l, r)] = ''.join([p[i] for i in v])
        return d
    left, right = '[]'
    s = string
    p = {}
    l, r = 0, 0
    q = s.find(left)
    t = True
    while t:
        c = []
        if q == -1: break
        for idx,i in enumerate(s[q:]):
            if i == left:  c.append(left)
            if i == right: c.pop()
            if len(c) == 0:
                l, r = q, q + idx + 1
                p[(l, r)] = s[l:r]
                q = s.find(left, r)
                break
        if len(c) > 0:
            t = False
    s = string
    d = combine(p)
    k = sorted(d)
    ll, rr = 0, len(s) + 1
    if k:
        q = [ll]
        for l,r in k:
            q.append(l); q.append(r)
        q.append(rr)
        e = {}
        w = {}
        pr = ''
        for i in range(len(q) - 1):
            k, v = (q[i], q[i+1]), s[q[i]:q[i+1]]
            if i%2 == 0: 
                # c = re.findall(r'\+!+\+$|\+$', v)
                c = re.findall(r'\+((?:!+\+)?)$', v)
                c.extend(re.findall(r'\+((?:!+)?)$', v))
                pr = c[0] if c else ''
                e[k] = v[:len(v) - len(pr)]
            if i%2 == 1: 
                w[k] = pr + v
        e.update(w)
        k = sorted(e)
        r = [e[i] for i in k if e[i]]
        if len(r) >= 2 and not r[0].endswith(']'):
            r = [r[0] + r[1]] + r[2:]
        return r
    else:
        print('error', string)
        return ['[{}]'.format(string)]

def plus(ls):
    '''
    通过将列表内的表达式进行比较初级的元映射后，进行运算变换
    这里的运算变换会考虑到不同类型的 js 隐式转换，虽然不一定能完全覆盖
    但是从原运算的角度来考虑的话，会更加贴近真实的解析状态
    原始函数经过切分函数后生成切分单元列表，然后再经过本函数后即可处理元映射计算处理
    eg. ['+!+[]', '+', '[0]', '+', '[][[]]', '+', '![true]', '+', '!+[]', '+', '!+[false]', '+', '!+[123]', '+', '!+[undefined]', '+', '[123123]', '+', "['asdfasdf']"]
     => '10undefinedfalsetruetruefalsetrue123123asdfasdf'
    原函数 +!+[]+[0]+[][[]]+![true]+!+[]+!+[false]+!+[123]+!+[undefined]+[123123]+['asdfasdf'] 
    '''
    _unfind     = -1
    _int        = 0
    _str        = 1
    _undefined  = 2
    _boolen     = 3
    _null       = 4
    _NaN        = 5
    _list       = 6
    q = [
        ["+!+[]",   "1",        _int],
        ["+!!+[]",  "0",        _int],
        ["+![]",    "0",        _int],
        ["+!![]",   "1",        _int],
        ["+[]",     "0",        _int],
        ["!+[]",    "true",     _boolen],
        ["!!+[]",   "false",    _boolen],
        ["![]",     "false",    _boolen],
        ["!![]",    "true",     _boolen],
        ["[]",      "[]",       _list],
        ["[][[]]",  "undefined",_undefined],
        ["[![]]",   "false",    _str],
    ]
    e = [
        [r"^\['([^']+)'\]$",    None,       _str],
        [r'^\[(.*)\]$',         None,       _list],
        [r'^\[\]\[[^\[\]]+\]$', "undefined",_undefined],
        [r'^!\[.*\]$',          "false",    _boolen],
        [r'^\+\[null\]$',       "0",        _int],
        [r'^\+\[undefined\]$',  "0",        _int],
        [r'^\+\[(\d+)\]$',      None,       _int],
        [r'^\+\[NaN\]$',        "NaN",      _NaN],
        [r"^\+\['([^']+)'\]$",  "NaN",      _NaN],
        [r"^!\+\['([^']+)'\]$", "true",     _boolen],
        [r'^!\+\[(\d+)\]$',     "_int_",    _boolen],
        [r'^!\+\[\w+\]$',       "true",     _boolen],
    ]
    def get_fit(s):
        if isinstance(s, (list,tuple)):
            return s
        for i in q:
            if s == i[0]:
                return i
        for i in e:
            i = i.copy()
            v = re.findall(i[0], s)
            if v:
                if i[1] is None:
                    i[1] = v[0]
                elif i[1] == '_int_':
                    i[1] = 'false' if int(v[0]) else 'true'
                return i
        return ['', '', _unfind]
    def parse_type(xv, xt, tp):
        if tp == _NaN:
            return 'NaN'
        if tp == _int:
            if xt != _int:
                if xv == 'true':    return '1'
                if xv == 'false':   return '0'
                if xv == 'null':    return '0'
            else:
                return xv
        if tp == _str:
            if xt != _str:
                if   xv == '[]':          return ''
                elif xv == 'NaN':         return 'NaN'
                elif xv == 'null':        return 'null'
                elif xv == 'true':        return 'true'
                elif xv == 'false':       return 'false'
                elif xv == 'undefined':   return 'undefined'
                else: return xv
            else:
                return xv
    def _plus(a, b):
        '''
        这里还需要增加一些无法计算类型的处理
        '''
        ak, av, at = a
        bk, bv, bt = b
        types = [at, bt]
        if _list in types or _str in types:
            rt = _str
        elif _NaN in types or _undefined in types:
            rt = _NaN
        elif _int in types:
            if types.count(_int) == 2:
                rt = _int
            elif _boolen in types or _null in types:
                rt = _int
        elif _boolen in types:
            if types.count(_boolen) == 2:
                rt = _int
            elif _null in types:
                rt = _int
        elif _null in types:
            if types.count(_boolen) == 2:
                rt = _int
        _a = parse_type(av, at, rt)
        _b = parse_type(bv, bt, rt)
        if rt == _NaN: val = 'NaN'
        if rt == _str: val = _a + _b
        if rt == _int: val = int(_a) + int(_b)
        return None,str(val),rt
    
    l = ls[::-1]
    t = True
    p = []
    if len(l) < 3:
        v = get_fit(l.pop())
        return v[1]
        v = parse_type(v[1], v[2], _str)
        return v
    while t and len(l):
        p.append(l.pop())
        if len(p) == 3 and p[1] == '+':
            left  = get_fit(p[0])
            right = get_fit(p[2])
            p = [_plus(left, right)]
    return repr(p[0][1]) if p[0][2] == _str else p[0][1]


def some(s):
    '''
    另外 cuter 和 plus 还需要能够处理  [?]  [?][?]  'asdf'[?]  这三种类型的数据合并
    这个处理应该是最次优先级的处理，处理完之后就会将
    '''
    print(s)
    print()

    unique = '##'
    unit = '[]'
    uleft = '@'
    uright = '&'

    v = s
    # 处理小括号
    def f(g):
        v = g.group(0)[1:-1].replace(unique,unit).replace(uleft,'[').replace(uright,']')
        v = plus(cuter(v))
        return '({})'.format(v)
    v = re.sub(r'\[([^\[\]]+)\]', r'{}\1{}'.format(uleft, uright), v)
    v = v.replace(unit,unique)
    v = re.sub(r'\([^\(\)]+\)', f, v).replace(unique,unit)
    v = re.sub(r"\(('[^'\(\)]+')\)", r'\1', v)
    print(v)
    print()

    # 优先处理中括号，将小范围的中括号先计算了，另外其不能包含小括号类型的内容
    def f(g):
        v = g.group(0)[1:-1].replace(unique,unit).replace(uleft,'[').replace(uright,']')
        v = plus(cuter(v))
        return '[{}]'.format(v)
    v = re.sub(r'\[([^\[\]]+)\]', r'{}\1{}'.format(uleft, uright), v)
    v = v.replace(unit,unique)
    v = re.sub(r'\[[^\[\]\(\)]+\]', f, v).replace(unique,unit).replace(uleft,'[').replace(uright,']')
    print(v)
    print()

    # f = lambda i:'({})'.format(plus(cuter(i.group(0)[1:-1].replace(unique,unit))))
    # print(v.replace(unit,unique))
    # v = re.sub(r'\([^\(\)]+\)', f, v.replace(unit,unique)).replace(unique,unit)
    # v = re.sub(r"\(('[^'\(\)]+')\)", r'\1', v)
    # print(v)
    # print()

s = '[![]]+[][[]]'
# s = '+!+[]+!+[]+!+[]+[]+[][[]]+[[[]]]'
# s = '[![]]+[][[]]+"asdf"+12312'
s
# s = '''$hidescript=String.fromCharCodeconstructor";_[_][_]((+{}+[]+[]+[]+[]+{})[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+$hidescript[(+[])]+([![]]+[][[]])[+!+[]+[+[]]]+$hidescript[(+!+[])]+(!![]+[])[!+[]+!+[]+!+[]]+([]+[]+{})[+!+[]]+(!![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+$hidescript[+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]]+([![]]+{})[+!+[]+[+[]]]+([]+[]+{})[+!+[]]+$hidescript[(+!+[])]+$hidescript[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([![]]+{})[+!+[]+[+[]]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([]+[]+{})[!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([]+[]+[][[]])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+([]+[]+{})[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([![]]+{})[+!+[]+[+[]]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([]+[]+{})[!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([![]]+{})[+!+[]+[+[]]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(![]+[])[+!+[]]+([]+[]+[][[]])[+!+[]]+([]+[]+[][[]])[!+[]+!+[]]+([]+[]+{})[+!+[]]+$hidescript[(+!+[])]+$hidescript[+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+$hidescript[+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])();'''
print('----1----')
v = plus(cuter(s))
print(cuter(s))
print(v)
some(s)

s = '+!+[]+[0]+[][[]]+![true]+!+[]+!+[false]+!+[123]+!+[undefined]+[123123]'
s = "+!+[]+[0]+[][[]]+![true]+!+[]+!+[false]+!+[123]+!+[undefined]+[123123]+['asdfasdf']"
# s = '+!+[]+[0]+[][[]]+![true]+!+[]+!+[false]+!+[123]+!+[undefined]'
# s = '+!+[]+[123123]'
# s = "+!+[]+[0]+'false'"
# s = '[123123]'
print('----2----')
v = plus(cuter(s))
print(cuter(s))
print(v)

# some(s)

